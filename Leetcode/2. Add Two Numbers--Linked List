/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    
    int CountNode( ListNode* input ) {  
        
        int count = 1 ;
        while ( input != NULL ) {
            input = input -> next ;
            count++ ;
        } // while()
        return count ;
        
    } // CountNode()
    
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        
        int sum = 0, c_in = 0, size = 0 ;
        ListNode* ans = new ListNode() ;
        ListNode* ptr = ans ;
        ListNode* conti ;
        
        size = ( CountNode(l1) > CountNode(l2) ) ? CountNode(l2) : CountNode(l1) ;
        for( int i = size ; i > 0 ; i-- ) {
            sum = ( l1 -> val + l2 -> val + c_in ) % 10 ;
            c_in = ( l1 -> val + l2 -> val + c_in ) / 10 ;
            ptr -> val = sum ;
            l1 = l1 -> next ;
            l2 = l2 -> next ;
            if ( l1 == NULL || l2 == NULL ) break ;
            ptr -> next = new ListNode() ;
            ptr = ptr -> next ;
        } // for ()
        
        
        if ( l1 == NULL && l2 == NULL && c_in == 0 )
            return ans ;
        else {
            conti = ( l1 == NULL ) ? l2 : l1 ;
            
            while ( conti != NULL ) {
                ptr -> next = new ListNode() ;
                ptr = ptr -> next ;
                sum = ( conti -> val + c_in ) % 10 ;
                c_in = ( conti -> val + c_in ) / 10 ;
                ptr -> val = sum ;
                conti = conti -> next ;
            } // while()
            
        } // else
        
        if ( c_in != 0 ) {
            ptr -> next = new ListNode() ;
            ptr = ptr -> next ; 
            ptr -> val = c_in ;
        } // if
        
        return ans ;

    }
};
